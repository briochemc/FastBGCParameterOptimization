using VegaLite, DataFrames #
using LaTeXStrings




df = DataFrame(
    method = Array{String}(undef, 0),
    time = Array{Float64}(undef, 0),
    iteration = Array{Int64}(undef, 0),
    qval = Array{Float64}(undef, 0),
    normgradq = Array{Float64}(undef, 0)
)
function mypush!(df, method_name, time_iter_q_normgradq)
    start_time = time_iter_q_normgradq[1, 1]
    for i in 1:size(time_iter_q_normgradq, 1)
        time_iter_q_normgradq[i, 1] -= start_time
        push!(df, [method_name; time_iter_q_normgradq[i, :]])
    end
    return df
end

println("The data being plotted was copy-pasted from Katana output!")
#    time                   iteration      q(λ)           |Dq(λ)|
method_name = "D2q"
time_iter_q_normgradq = [
    1.55175691039612e9       -1      6.541958e-02     5.495858e-02
    1551756970.0654759407     0     6.541958e-02     5.495858e-02
    1551757029.2447180748     1     1.415066e-02     2.477936e-02
    1551757078.6766560078     2     8.033722e-03     2.222672e-03
    1551757124.1681120396     3     7.626427e-03     6.482999e-04
    1551757163.4911770821     4     7.623451e-03     3.599588e-06
    1551757191.9756009579     5     7.623451e-03     2.654012e-09
]
mypush!(df, method_name, time_iter_q_normgradq)


method_name = "FDDq"
time_iter_q_normgradq = [
    1.551757206021395e9            -1      6.541958e-02     5.495858e-02
    1551757463.1829349995     0     6.541958e-02     5.495858e-02
    1551757724.1325070858     1     1.436116e-02     2.516030e-02
    1551757983.5896670818     2     8.052515e-03     2.266454e-03
    1551758244.1409380436     3     7.626479e-03     7.192392e-04
    1551758498.2498719692     4     7.623451e-03     1.871460e-06
    1551758526.1253449917     5     7.623451e-03     2.515725e-09
]
mypush!(df, method_name, time_iter_q_normgradq)

method_name = "ADDq"
time_iter_q_normgradq = [
    1.551758535051019e9            -1      6.541958e-02     5.495858e-02
    1551758749.3396151066     0     6.541958e-02     5.495858e-02
    1551759391.038105011     1     1.415066e-02     2.477936e-02
    1551759913.1118679047     2     8.033722e-03     2.222672e-03
    1551760364.7857260704     3     7.626427e-03     6.482999e-04
    1551760613.9882490635     4     7.623451e-03     3.599584e-06
    1551760642.1234281063     5     7.623451e-03     2.656752e-09
]
mypush!(df, method_name, time_iter_q_normgradq)

method_name = "CSDDq"
time_iter_q_normgradq = [
    1.551760651124301e9            -1      6.541958e-02     5.495858e-02
    1551761136.4315431118     0     6.541958e-02     5.495858e-02
    1551761720.1648418903     1     1.415066e-02     2.477936e-02
    1551762415.2240309715     2     8.033722e-03     2.222673e-03
    1551762998.5815711021     3     7.626427e-03     6.482999e-04
    1551763447.2911000252     4     7.623451e-03     3.599591e-06
    1551763475.3592538834     5     7.623451e-03     2.668914e-09
]
mypush!(df, method_name, time_iter_q_normgradq)


list_methods = [
    "D2q"
    "FDDq"
    "ADDq"
    "CSDDq"
]

p = df |>
@vlplot(
    mark={
        :line,
        interpolate="step-before"
    },
    x={:time, title="Elapsed computation time (seconds)"},
    y={:normgradq, title="norm of dq(p)", scale={typ=:log}},
    color={:method, scale={scheme="category10"}}
)

path_to_package_root = joinpath(splitpath(@__DIR__)[1:end-1]...)
pdf_file = joinpath(path_to_package_root, "fig", "Optim_callback_katana_vegalite.pdf")
save(pdf_file, p)

#=


┌────────────────────────
│ Optimizing using method D2q, and printing time and q :
│
│    1.55175691039612e9             -1      6.541958e-02     5.495858e-02
│    1551756970.0654759407     0     6.541958e-02     5.495858e-02
│    1551757029.2447180748     1     1.415066e-02     2.477936e-02
│    1551757078.6766560078     2     8.033722e-03     2.222672e-03
│    1551757124.1681120396     3     7.626427e-03     6.482999e-04
│    1551757163.4911770821     4     7.623451e-03     3.599588e-06
│    1551757191.9756009579     5     7.623451e-03     2.654012e-09
└────────────────────────

┌────────────────────────
│ Optimizing using method FDDq, and printing time and q :
│
│    1.551757206021395e9            -1      6.541958e-02     5.495858e-02
│    1551757463.1829349995     0     6.541958e-02     5.495858e-02
│    1551757724.1325070858     1     1.436116e-02     2.516030e-02
│    1551757983.5896670818     2     8.052515e-03     2.266454e-03
│    1551758244.1409380436     3     7.626479e-03     7.192392e-04
│    1551758498.2498719692     4     7.623451e-03     1.871460e-06
│    1551758526.1253449917     5     7.623451e-03     2.515725e-09
└────────────────────────

┌────────────────────────
│ Optimizing using method ADDq, and printing time and q :
│
│    1.551758535051019e9            -1      6.541958e-02     5.495858e-02
│    1551758749.3396151066     0     6.541958e-02     5.495858e-02
│    1551759391.038105011     1     1.415066e-02     2.477936e-02
│    1551759913.1118679047     2     8.033722e-03     2.222672e-03
│    1551760364.7857260704     3     7.626427e-03     6.482999e-04
│    1551760613.9882490635     4     7.623451e-03     3.599584e-06
│    1551760642.1234281063     5     7.623451e-03     2.656752e-09
└────────────────────────

┌────────────────────────
│ Optimizing using method CSDDq, and printing time and q :
│
│    1.551760651124301e9            -1      6.541958e-02     5.495858e-02
│    1551761136.4315431118     0     6.541958e-02     5.495858e-02
│    1551761720.1648418903     1     1.415066e-02     2.477936e-02
│    1551762415.2240309715     2     8.033722e-03     2.222673e-03
│    1551762998.5815711021     3     7.626427e-03     6.482999e-04
│    1551763447.2911000252     4     7.623451e-03     3.599591e-06
│    1551763475.3592538834     5     7.623451e-03     2.668914e-09
└────────────────────────=#
