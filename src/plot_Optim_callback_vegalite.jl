using VegaLite, DataFrames #
using LaTeXStrings




df = DataFrame(
    method = Array{String}(undef, 0),
    time = Array{Float64}(undef, 0),
    iteration = Array{Int64}(undef, 0),
    qval = Array{Float64}(undef, 0),
    normgradq = Array{Float64}(undef, 0)
)
function mypush!(df, method_name, time_iter_q_normgradq)
    start_time = time_iter_q_normgradq[1, 1]
    for i in 1:size(time_iter_q_normgradq, 1)
        time_iter_q_normgradq[i, 1] -= start_time
        push!(df, [method_name; time_iter_q_normgradq[i, :]])
    end
    return df
end

println("The data being plotted was copy-pasted from Katana output!")
#    time                   iteration      q(λ)           |Dq(λ)|
method_name = "FLASH"
time_iter_q_normgradq = [
    1.552098145644013e9      -1     9.973847e-02     9.846679e-02
    1552098248.7964999676     0     9.973847e-02     9.846679e-02
    1552098351.2531189919     1     1.679872e-02     6.089963e-02
    1552098481.7849030495     2     6.970948e-03     2.493615e-02
    1552098539.0711801052     3     5.678646e-03     2.274644e-03
    1552098586.3516759872     4     5.529870e-03     9.008393e-04
    1552098642.0480070114     5     5.521264e-03     4.901419e-05
    1552098683.4587459564     6     5.521236e-03     5.834928e-07
    1552098711.35510993       7     5.521236e-03     3.744009e-10
]
mypush!(df, method_name, time_iter_q_normgradq)


method_name = "FiniteDiff"
time_iter_q_normgradq = [
    1.552098724763382e9      -1     9.973847e-02     9.846679e-02
    1552099087.9343440533     0     9.973847e-02     9.846679e-02
    1552099447.9351370335     1     1.679853e-02     6.089921e-02
    1552099854.1550860405     2     6.970752e-03     2.493435e-02
    1552100178.1897668839     3     5.678668e-03     2.275158e-03
    1552100486.7684071064     4     5.529873e-03     9.009779e-04
    1552100808.146433115      5     5.521264e-03     4.902208e-05
    1552101119.4503591061     6     5.521236e-03     5.855503e-07
    1552101147.4039070606     7     5.521236e-03     3.754357e-10
]
mypush!(df, method_name, time_iter_q_normgradq)

method_name = "Dual"
time_iter_q_normgradq = [
    1.552101156927006e9      -1     9.973847e-02     9.846679e-02
    1552101459.7193260193     0     9.973847e-02     9.846679e-02
    1552101710.0994141102     1     1.679872e-02     6.089963e-02
    1552102044.2914419174     2     6.970948e-03     2.493615e-02
    1552102254.6764769554     3     5.678646e-03     2.274644e-03
    1552102453.1531159878     4     5.529870e-03     9.008393e-04
    1552102763.8378050327     5     5.521264e-03     4.901418e-05
    1552102962.2290239334     6     5.521236e-03     5.834965e-07
    1552102989.9707660675     7     5.521236e-03     3.862567e-10
]
mypush!(df, method_name, time_iter_q_normgradq)

method_name = "Complex"
time_iter_q_normgradq = [
    1.552102998601526e9      -1     9.973847e-02     9.846679e-02
    1552103472.0031700134     0     9.973847e-02     9.846679e-02
    1552103857.2109088898     1     1.679872e-02     6.089963e-02
    1552104378.9827759266     2     6.970948e-03     2.493615e-02
    1552104712.5761239529     3     5.678646e-03     2.274644e-03
    1552105043.6389520168     4     5.529870e-03     9.008393e-04
    1552105486.1163060665     5     5.521264e-03     4.901420e-05
    1552105819.6719510555     6     5.521236e-03     5.834909e-07
    1552105847.4533278942     7     5.521236e-03     3.617950e-10
]
mypush!(df, method_name, time_iter_q_normgradq)

method_name = "HyperDual"
time_iter_q_normgradq = [
    1.552105856068796e9      -1     9.973847e-02     9.846679e-02
    1552107042.1791219711     0     9.973847e-02     9.846679e-02
    1552107924.3615291119     1     1.679872e-02     6.089963e-02
    1552109158.7178890705     2     6.970948e-03     2.493615e-02
    1552110002.9671969414     3     5.678646e-03     2.274644e-03
    1552110827.3267159462     4     5.529870e-03     9.008393e-04
    1552111966.856235981      5     5.521264e-03     4.901419e-05
    1552112806.2862560749     6     5.521236e-03     5.834912e-07
    1552112927.4948720932     7     5.521236e-03     3.724027e-10
]
mypush!(df, method_name, time_iter_q_normgradq)

list_methods = ["FLASH", "Dual", "FiniteDiff", "Complex", "HyperDual"]

Array_colors_RGB = [
     0   0   0
     0 114 178
     0 158 115
   230 159   0
    86 180 233
]

# function to transform RGB (from 0 to 255) color array into list of hex
function Array_color_RGB_to_hex_list(M)
    out = Array{String,1}(undef, 0)
    for icol in 1:size(M, 1)
        r, g, b = M[icol, :] / 255
        push!(out, "#" * hex(RGB(r, g, b)))
    end 
    return out
end

mycolors = Array_color_RGB_to_hex_list(Array_colors_RGB)

p = df |>
@vlplot(
    width=300,
    mark={
        :line,
        interpolate="step-before"
    },
    encoding={
        x={:time, title="Elapsed computation time (seconds)"},
        y={:normgradq, title="norm of gradient", scale={typ=:log}},
        shape={:method, typ="nominal", scale={domain=list_methods}},
        color={:method, typ="nominal", scale={range=mycolors, domain=list_methods}, legend=false}
    },
    resolve={
        scale={
            color="independent",
            shape="independent"
        },
    }
)

path_to_package_root = joinpath(splitpath(@__DIR__)[1:end-1]...)
pdf_file = joinpath(path_to_package_root, "fig", "Optim_callback_katana_vegalite.pdf")
save(pdf_file, p)

#=


┌────────────────────────
│ Optimizing using method FLASH, and printing time and q :
│
│    1.552098145644013e9
│    time                   iteration      q(λ)           |Dq(λ)|
│    1552098248.7964999676     0     9.973847e-02     9.846679e-02
│    1552098351.2531189919     1     1.679872e-02     6.089963e-02
│    1552098481.7849030495     2     6.970948e-03     2.493615e-02
│    1552098539.0711801052     3     5.678646e-03     2.274644e-03
│    1552098586.3516759872     4     5.529870e-03     9.008393e-04
│    1552098642.0480070114     5     5.521264e-03     4.901419e-05
│    1552098683.4587459564     6     5.521236e-03     5.834928e-07
│    1552098711.35510993     7     5.521236e-03     3.744009e-10
└────────────────────────

┌────────────────────────
│ Optimizing using method FiniteDiff, and printing time and q :
│
│    1.552098724763382e9
│    time                   iteration      q(λ)           |Dq(λ)|
│    1552099087.9343440533     0     9.973847e-02     9.846679e-02
│    1552099447.9351370335     1     1.679853e-02     6.089921e-02
│    1552099854.1550860405     2     6.970752e-03     2.493435e-02
│    1552100178.1897668839     3     5.678668e-03     2.275158e-03
│    1552100486.7684071064     4     5.529873e-03     9.009779e-04
│    1552100808.146433115     5     5.521264e-03     4.902208e-05
│    1552101119.4503591061     6     5.521236e-03     5.855503e-07
│    1552101147.4039070606     7     5.521236e-03     3.754357e-10
└────────────────────────

┌────────────────────────
│ Optimizing using method Dual, and printing time and q :
│
│    1.552101156927006e9
│    time                   iteration      q(λ)           |Dq(λ)|
│    1552101459.7193260193     0     9.973847e-02     9.846679e-02
│    1552101710.0994141102     1     1.679872e-02     6.089963e-02
│    1552102044.2914419174     2     6.970948e-03     2.493615e-02
│    1552102254.6764769554     3     5.678646e-03     2.274644e-03
│    1552102453.1531159878     4     5.529870e-03     9.008393e-04
│    1552102763.8378050327     5     5.521264e-03     4.901418e-05
│    1552102962.2290239334     6     5.521236e-03     5.834965e-07
│    1552102989.9707660675     7     5.521236e-03     3.862567e-10
└────────────────────────

┌────────────────────────
│ Optimizing using method Complex, and printing time and q :
│
│    1.552102998601526e9
│    time                   iteration      q(λ)           |Dq(λ)|
│    1552103472.0031700134     0     9.973847e-02     9.846679e-02
│    1552103857.2109088898     1     1.679872e-02     6.089963e-02
│    1552104378.9827759266     2     6.970948e-03     2.493615e-02
│    1552104712.5761239529     3     5.678646e-03     2.274644e-03
│    1552105043.6389520168     4     5.529870e-03     9.008393e-04
│    1552105486.1163060665     5     5.521264e-03     4.901420e-05
│    1552105819.6719510555     6     5.521236e-03     5.834909e-07
│    1552105847.4533278942     7     5.521236e-03     3.617950e-10
└────────────────────────

┌────────────────────────
│ Optimizing using method HyperDual, and printing time and q :
│
│    1.552105856068796e9
│    time                   iteration      q(λ)           |Dq(λ)|
│    1552107042.1791219711     0     9.973847e-02     9.846679e-02
│    1552107924.3615291119     1     1.679872e-02     6.089963e-02
│    1552109158.7178890705     2     6.970948e-03     2.493615e-02
│    1552110002.9671969414     3     5.678646e-03     2.274644e-03
│    1552110827.3267159462     4     5.529870e-03     9.008393e-04
│    1552111966.856235981     5     5.521264e-03     4.901419e-05
│    1552112806.2862560749     6     5.521236e-03     5.834912e-07
│    1552112927.4948720932     7     5.521236e-03     3.724027e-10
└────────────────────────



=#
