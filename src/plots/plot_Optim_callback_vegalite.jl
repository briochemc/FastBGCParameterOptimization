using VegaLite, DataFrames #
using LaTeXStrings




df = DataFrame(
    method = Array{String}(undef, 0),
    time = Array{Float64}(undef, 0),
    iteration = Array{Int64}(undef, 0),
    qval = Array{Float64}(undef, 0),
    normgradq = Array{Float64}(undef, 0)
)
function mypush!(df, method_name, time_iter_q_normgradq)
    start_time = time_iter_q_normgradq[1, 1]
    for i in 2:size(time_iter_q_normgradq, 1)
        time_iter_q_normgradq[i, 1] -= start_time
        time_iter_q_normgradq[:, 1] .= max.(time_iter_q_normgradq[:, 1], 100.0)
        push!(df, [method_name; time_iter_q_normgradq[i, :]])
    end
    return df
end


println("The data being plotted was copy-pasted from Katana output!")
#    time                   iteration      q(λ)           |Dq(λ)|
method_name = "F-1"
time_iter_q_normgradq = [
   1.553891785371606e9        -1              NaN          NaN
   1.5538918771593220e+09     0     9.973847e-02     9.846679e-02
   1.5538919781540020e+09     1     1.679872e-02     6.089963e-02
   1.5538921088575809e+09     2     6.970948e-03     2.493615e-02
   1.5538921663446469e+09     3     5.678646e-03     2.274644e-03
   1.5538922136553929e+09     4     5.529870e-03     9.008393e-04
   1.5538922694610600e+09     5     5.521264e-03     4.901418e-05
   1.5538923105267880e+09     6     5.521236e-03     5.834928e-07
   1.5538923399301929e+09     7     5.521236e-03     3.871658e-10
]
mypush!(df, method_name, time_iter_q_normgradq)

method_name = "old F-0"
time_iter_q_normgradq = [
   1.553892348623066e9        -1              NaN          NaN
   1.5538924398934979e+09     0     9.973847e-02     9.846679e-02
   1.5538925415286181e+09     1     1.679872e-02     6.089963e-02
   1.5538926725698290e+09     2     6.970948e-03     2.493615e-02
   1.5538927308018031e+09     3     5.678646e-03     2.274644e-03
   1.5538927785507600e+09     4     5.529870e-03     9.008393e-04
   1.5538928348789151e+09     5     5.521264e-03     4.901419e-05
   1.5538928767872119e+09     6     5.521236e-03     5.834945e-07
   1.5538929052516940e+09     7     5.521236e-03     3.852644e-10
]
mypush!(df, method_name, time_iter_q_normgradq)

method_name = "DUAL"
time_iter_q_normgradq = [
   1.553894085906437e9        -1              NaN          NaN
   1.5538943777420571e+09     0     9.973847e-02     9.846679e-02
   1.5538946266732659e+09     1     1.679872e-02     6.089963e-02
   1.5538949592989571e+09     2     6.970948e-03     2.493615e-02
   1.5538951664224191e+09     3     5.678646e-03     2.274644e-03
   1.5538953627674689e+09     4     5.529870e-03     9.008393e-04
   1.5538956184660449e+09     5     5.521264e-03     4.901419e-05
   1.5538958116648540e+09     6     5.521236e-03     5.834920e-07
   1.5538958395555921e+09     7     5.521236e-03     3.873180e-10
]
mypush!(df, method_name, time_iter_q_normgradq)

method_name = "FD1"
time_iter_q_normgradq = [
   1.553898703850093e9        -1              NaN          NaN
   1.5538990688773670e+09     0     9.973847e-02     9.846679e-02
   1.5538994312962489e+09     1     1.679853e-02     6.089921e-02
   1.5538998379830041e+09     2     6.970752e-03     2.493435e-02
   1.5539001620146990e+09     3     5.678668e-03     2.275158e-03
   1.5539004720620339e+09     4     5.529873e-03     9.009779e-04
   1.5539007968753130e+09     5     5.521264e-03     4.902208e-05
   1.5539011105579560e+09     6     5.521236e-03     5.855503e-07
   1.5539011384675860e+09     7     5.521236e-03     3.754357e-10
]
mypush!(df, method_name, time_iter_q_normgradq)

method_name = "CSD"
time_iter_q_normgradq = [
   1.553895848314359e9        -1              NaN          NaN
   1.5538963150927920e+09     0     9.973847e-02     9.846679e-02
   1.5538966984427259e+09     1     1.679872e-02     6.089963e-02
   1.5538972217128820e+09     2     6.970948e-03     2.493615e-02
   1.5538975557347550e+09     3     5.678646e-03     2.274644e-03
   1.5538978857059619e+09     4     5.529870e-03     9.008393e-04
   1.5538983284979229e+09     5     5.521264e-03     4.901418e-05
   1.5538986672325211e+09     6     5.521236e-03     5.834949e-07
   1.5538986952845850e+09     7     5.521236e-03     3.976156e-10
]
mypush!(df, method_name, time_iter_q_normgradq)

method_name = "old F-1"
time_iter_q_normgradq = [
   1.553892914068006e9        -1              NaN          NaN
   1.5538930919238420e+09     0     9.973847e-02     9.846679e-02
   1.5538932811424730e+09     1     1.679872e-02     6.089963e-02
   1.5538934982930911e+09     2     6.970948e-03     2.493615e-02
   1.5538936425553589e+09     3     5.678646e-03     2.274644e-03
   1.5538937764357700e+09     4     5.529870e-03     9.008393e-04
   1.5538939200781760e+09     5     5.521264e-03     4.901419e-05
   1.5538940490804729e+09     6     5.521236e-03     5.834930e-07
   1.5538940772596700e+09     7     5.521236e-03     3.802674e-10
]
mypush!(df, method_name, time_iter_q_normgradq)

method_name = "HYPER"
time_iter_q_normgradq = [
   1.553901146980944e9        -1              NaN          NaN
   1.5539024750351820e+09     0     9.973847e-02     9.846679e-02
   1.5539034799039130e+09     1     1.679872e-02     6.089963e-02
   1.5539048539764271e+09     2     6.970948e-03     2.493615e-02
   1.5539058377129710e+09     3     5.678646e-03     2.274644e-03
   1.5539068005523410e+09     4     5.529870e-03     9.008393e-04
   1.5539080892746651e+09     5     5.521264e-03     4.901419e-05
   1.5539090816234479e+09     6     5.521236e-03     5.834979e-07
   1.5539092045600491e+09     7     5.521236e-03     3.859966e-10
]
mypush!(df, method_name, time_iter_q_normgradq)


method_name = "FD2"
time_iter_q_normgradq = [
   1.553909213209507e9        -1              NaN          NaN
   1.5539115666410711e+09     0     9.973847e-02     9.846782e-02
   1.5539138055633700e+09     1     3.108380e-02     7.219605e-02
   1.5539140340892749e+09     2     3.108380e-02     7.219605e-02
   1.5539162408130100e+09     3     1.590823e-02     9.821364e-03
   1.5539184394204969e+09     4     1.320026e-02     9.789139e-03
   1.5539206849725580e+09     5     9.045239e-03     8.962242e-03
   1.5539229306755970e+09     6     6.306687e-03     4.704516e-03
   1.5539232066945419e+09     7     6.306687e-03     4.704516e-03
   1.5539255090377131e+09     8     5.852420e-03     1.519309e-03
   1.5539277035027030e+09     9     5.668477e-03     7.470323e-04
   1.5539298892104311e+09    10     5.538467e-03     1.461994e-04
   1.5539320884310579e+09    11     5.528558e-03     1.163430e-04
   1.5539323286110370e+09    12     5.528558e-03     1.163430e-04
   1.5539325769600911e+09    13     5.528558e-03     1.163430e-04
   1.5539347482988760e+09    14     5.523903e-03     3.631611e-05
   1.5539370189682970e+09    15     5.521337e-03     2.741271e-05
   1.5539393554231369e+09    16     5.521263e-03     1.552756e-05
   1.5539416772952800e+09    17     5.521239e-03     1.287859e-06
   1.5539439769158981e+09    18     5.521237e-03     1.162663e-06
   1.5539462894373090e+09    19     5.521236e-03     3.473530e-07
   1.5539486040328720e+09    20     5.521236e-03     6.834419e-08
   1.5539509164582541e+09    21     5.521236e-03     4.660756e-08
   1.5539511452706039e+09    22     5.521236e-03     9.086132e-09
]
mypush!(df, method_name, time_iter_q_normgradq)

list_methods = ["F-1", "old F-0", "DUAL", "FD1", "CSD", "old F-1", "HYPER", "FD2"]
# mycolors = [
#     "#000000"
#     "#40004b"
#     "#9970ab"
#     "#762a83"
#     "#00441b"
#     "#1b7837"
#     "#5aae61"
# ]

# Julia_colors_RGB 
# darker_blue    = [0.251, 0.388, 0.847]
# lighter_blue   = [0.4  , 0.51 , 0.878]
darker_purple  = [0.584, 0.345, 0.698]
# lighter_purple = [0.667, 0.475, 0.757]
darker_green   = [0.22 , 0.596, 0.149]
# lighter_green  = [0.376, 0.678, 0.318]
darker_red     = [0.796, 0.235, 0.2  ]
# lighter_red    = [0.835, 0.388, 0.361]
#


mycolors_RGB = 0.85ones(8,3) # gray base
mycolors_RGB[1, :] .= darker_red
mycolors_RGB[2, :] .= darker_purple
mycolors_RGB[3:5, :] .= 0.65
mycolors_RGB[6, :] .= darker_green

mymarkers = ["cross", "cross", "diamond", "square", "circle", "cross", "diamond", "square"]

# Without od methods:
mycolors_RGB = 0.85ones(6,3) # gray base
mycolors_RGB[1, :] .= darker_red
mycolors_RGB[2:4, :] .= 0.65
mymarkers = ["cross", "diamond", "square", "circle", "diamond", "square"]
list_methods = ["F-1", "DUAL", "FD1", "CSD", "HYPER", "FD2"]
filter!(row -> row[:method] ∈ list_methods, df)

using Colors
# function to transform RGB (from 0 to 1) color array into list of hex
function array_of_RGB_to_hex_list(M)
    out = Array{String,1}(undef, 0)
    for icol in 1:size(M, 1)
        r, g, b = M[icol, :]
        push!(out, "#" * hex(RGB(r, g, b)))
    end
    return out
end
#
mycolors = array_of_RGB_to_hex_list(mycolors_RGB)
p = df |>
@vlplot(
    width=500,
    height=400,
    mark={
        :line,
        interpolate="step-before",
    },
    encoding={
        x={:time, title="Elapsed computation time (seconds)", scale={typ=:log,domain=[100,30000]}},
        y={:normgradq, title="|∇f|", scale={typ=:log, domain=[1e-11,1e-1]}},
        shape={:method, typ="nominal", scale={range=mymarkers, domain=list_methods}, legend={orient="top-right"}},
        color={:method, typ="nominal", scale={range=mycolors, domain=list_methods}}
    },
    resolve={
        scale={
            color="independent",
            shape="independent"
        },
    }
)

path_to_package_root = joinpath(splitpath(@__DIR__)[1:end-1]...)
pdf_file = joinpath(path_to_package_root, "fig", "Optim_callback_katana_vegalite.pdf")
save(pdf_file, p)


svg_file = joinpath(path_to_package_root, "fig", "Optim_callback_katana_vegalite.svg")
save(svg_file, p)
#=

───────────────────────
Optimizing using method OF1, for Precompiled run

   1.553891785371606e9        -1              NaN          NaN
   1.5538918771593220e+09     0     9.973847e-02     9.846679e-02
   1.5538919781540020e+09     1     1.679872e-02     6.089963e-02
   1.5538921088575809e+09     2     6.970948e-03     2.493615e-02
   1.5538921663446469e+09     3     5.678646e-03     2.274644e-03
   1.5538922136553929e+09     4     5.529870e-03     9.008393e-04
   1.5538922694610600e+09     5     5.521264e-03     4.901418e-05
   1.5538923105267880e+09     6     5.521236e-03     5.834928e-07
   1.5538923399301929e+09     7     5.521236e-03     3.871658e-10
───────────────────────

───────────────────────
Optimizing using method F0, for Precompiled run

   1.553892348623066e9        -1              NaN          NaN
   1.5538924398934979e+09     0     9.973847e-02     9.846679e-02
   1.5538925415286181e+09     1     1.679872e-02     6.089963e-02
   1.5538926725698290e+09     2     6.970948e-03     2.493615e-02
   1.5538927308018031e+09     3     5.678646e-03     2.274644e-03
   1.5538927785507600e+09     4     5.529870e-03     9.008393e-04
   1.5538928348789151e+09     5     5.521264e-03     4.901419e-05
   1.5538928767872119e+09     6     5.521236e-03     5.834945e-07
   1.5538929052516940e+09     7     5.521236e-03     3.852644e-10
───────────────────────

───────────────────────
Optimizing using method F1, for Precompiled run

   1.553892914068006e9        -1              NaN          NaN
   1.5538930919238420e+09     0     9.973847e-02     9.846679e-02
   1.5538932811424730e+09     1     1.679872e-02     6.089963e-02
   1.5538934982930911e+09     2     6.970948e-03     2.493615e-02
   1.5538936425553589e+09     3     5.678646e-03     2.274644e-03
   1.5538937764357700e+09     4     5.529870e-03     9.008393e-04
   1.5538939200781760e+09     5     5.521264e-03     4.901419e-05
   1.5538940490804729e+09     6     5.521236e-03     5.834930e-07
   1.5538940772596700e+09     7     5.521236e-03     3.802674e-10
───────────────────────

───────────────────────
Optimizing using method DUAL, for Precompiled run

   1.553894085906437e9        -1              NaN          NaN
   1.5538943777420571e+09     0     9.973847e-02     9.846679e-02
   1.5538946266732659e+09     1     1.679872e-02     6.089963e-02
   1.5538949592989571e+09     2     6.970948e-03     2.493615e-02
   1.5538951664224191e+09     3     5.678646e-03     2.274644e-03
   1.5538953627674689e+09     4     5.529870e-03     9.008393e-04
   1.5538956184660449e+09     5     5.521264e-03     4.901419e-05
   1.5538958116648540e+09     6     5.521236e-03     5.834920e-07
   1.5538958395555921e+09     7     5.521236e-03     3.873180e-10
───────────────────────

───────────────────────
Optimizing using method CSD, for Precompiled run

   1.553895848314359e9        -1              NaN          NaN
   1.5538963150927920e+09     0     9.973847e-02     9.846679e-02
   1.5538966984427259e+09     1     1.679872e-02     6.089963e-02
   1.5538972217128820e+09     2     6.970948e-03     2.493615e-02
   1.5538975557347550e+09     3     5.678646e-03     2.274644e-03
   1.5538978857059619e+09     4     5.529870e-03     9.008393e-04
   1.5538983284979229e+09     5     5.521264e-03     4.901418e-05
   1.5538986672325211e+09     6     5.521236e-03     5.834949e-07
   1.5538986952845850e+09     7     5.521236e-03     3.976156e-10
───────────────────────

───────────────────────
Optimizing using method FD1, for Precompiled run

   1.553898703850093e9        -1              NaN          NaN
   1.5538990688773670e+09     0     9.973847e-02     9.846679e-02
   1.5538994312962489e+09     1     1.679853e-02     6.089921e-02
   1.5538998379830041e+09     2     6.970752e-03     2.493435e-02
   1.5539001620146990e+09     3     5.678668e-03     2.275158e-03
   1.5539004720620339e+09     4     5.529873e-03     9.009779e-04
   1.5539007968753130e+09     5     5.521264e-03     4.902208e-05
   1.5539011105579560e+09     6     5.521236e-03     5.855503e-07
   1.5539011384675860e+09     7     5.521236e-03     3.754357e-10
───────────────────────

───────────────────────
Optimizing using method HYPER, for Precompiled run

   1.553901146980944e9        -1              NaN          NaN
   1.5539024750351820e+09     0     9.973847e-02     9.846679e-02
   1.5539034799039130e+09     1     1.679872e-02     6.089963e-02
   1.5539048539764271e+09     2     6.970948e-03     2.493615e-02
   1.5539058377129710e+09     3     5.678646e-03     2.274644e-03
   1.5539068005523410e+09     4     5.529870e-03     9.008393e-04
   1.5539080892746651e+09     5     5.521264e-03     4.901419e-05
   1.5539090816234479e+09     6     5.521236e-03     5.834979e-07
   1.5539092045600491e+09     7     5.521236e-03     3.859966e-10
───────────────────────

───────────────────────
Optimizing using method FD2, for Precompiled run

   1.553909213209507e9        -1              NaN          NaN
   1.5539115666410711e+09     0     9.973847e-02     9.846782e-02
   1.5539138055633700e+09     1     3.108380e-02     7.219605e-02
   1.5539140340892749e+09     2     3.108380e-02     7.219605e-02
   1.5539162408130100e+09     3     1.590823e-02     9.821364e-03
   1.5539184394204969e+09     4     1.320026e-02     9.789139e-03
   1.5539206849725580e+09     5     9.045239e-03     8.962242e-03
   1.5539229306755970e+09     6     6.306687e-03     4.704516e-03
   1.5539232066945419e+09     7     6.306687e-03     4.704516e-03
   1.5539255090377131e+09     8     5.852420e-03     1.519309e-03
   1.5539277035027030e+09     9     5.668477e-03     7.470323e-04
   1.5539298892104311e+09    10     5.538467e-03     1.461994e-04
   1.5539320884310579e+09    11     5.528558e-03     1.163430e-04
   1.5539323286110370e+09    12     5.528558e-03     1.163430e-04
   1.5539325769600911e+09    13     5.528558e-03     1.163430e-04
   1.5539347482988760e+09    14     5.523903e-03     3.631611e-05
   1.5539370189682970e+09    15     5.521337e-03     2.741271e-05
   1.5539393554231369e+09    16     5.521263e-03     1.552756e-05
   1.5539416772952800e+09    17     5.521239e-03     1.287859e-06
   1.5539439769158981e+09    18     5.521237e-03     1.162663e-06
   1.5539462894373090e+09    19     5.521236e-03     3.473530e-07
   1.5539486040328720e+09    20     5.521236e-03     6.834419e-08
   1.5539509164582541e+09    21     5.521236e-03     4.660756e-08
   1.5539511452706039e+09    22     5.521236e-03     9.086132e-09
─────────────────────


=#
