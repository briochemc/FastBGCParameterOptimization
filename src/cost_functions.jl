# Cost functions
"""
    nrm(x)

Gives the "tracer" norm:
`nrm(x)` is the square root of the sum the squares of the volume-weighted norms of (the real parts of) each tracer.
This choice is arbitrary but is simple.
However, it has a weird unit of mol m^(-3/2).
This is OK because we normalize everything later.
(Particularly important for the cost function and the solver tolerances.)
Note: `nrm` **should not** be used with the complex step method or dual numbers.
"""
function nrm(x)
    DIN, POM = unpackx(x)
    return sqrt(vnorm¬≤(‚Ñú(DIN)) + vnorm¬≤(‚Ñú(POM)))
end
‚Ñú(x::Real) = (x)
‚Ñú(x::Complex) = real(x)
‚Ñú(x::Dual) = DualNumbers.realpart(x)
‚Ñú(x::Hyper) = HyperDualNumbers.realpart(x)
‚Ñú(x::Vector) = ‚Ñú.(x)

"""
    f‚Çì(x)

Returns the cost of state `x`.
"""
function f‚Çì(x) # with respect to x
    DIN, _ = unpackx(x)
    return vnorm¬≤(DIN - DINobs) / vnorm¬≤(DINobs)
end

"""
    ‚àá‚Çìf(x)

Returns the gradient of cost of `x` (at `x`).
"""
function ‚àá‚Çìf(x, p)
    DIN, _ = unpackx(x)
    kron([1 0], Dvnorm¬≤(DIN - DINobs) / vnorm¬≤(DINobs))
end

f‚Çö_noweight(p) = 0.5 * transpose(p2Œª(p)) * Matrix(Diagonal(œÉ¬≤obs.^-1)) * p2Œª(p)
Df‚Çö_noweight(p) = transpose(‚àáp2Œª(p) .* œÉ¬≤obs.^-1 .* p2Œª(p))

"""
    f(p)

Returns the cost of parameters `p`.
"""
f‚Çö(p) = p.œâ * f‚Çö_noweight(p)

"""
    ‚àá‚Çöf(p)

Returns the gradient of cost of parameters `p` (at `p`).
"""
‚àá‚Çöf(x, p) = p.œâ * Df‚Çö_noweight(p) # for generic form

"""
    f(x, p)

Returns the cost of state `x` plus the cost of parameters `p`.
The costs are added to be used in a Bayesian framework eventually.
(And also because it is simpler.)
"""
function f(x, p) # with respect to both x and p
    return f‚Çì(x) + f‚Çö(p)
end


"""
    print_cost(cval; preprint)

Prints the cost as a root mean square (RMS) error in percent.
(Will also print the imaginary or dual part if any.)
"""
function print_cost(cval; preprint=" ")
    if preprint ‚â† ""
        print(preprint)
        printRMS(cval)
    end
    return nothing
end
printRMS(cval) = @printf("RMS = %.2f%%\n", 100 * sqrt(cval / f(0*x‚ÇÄ)))
printRMS(cval::Dual) = @printf("RMS = %.2f%% (Œµ part:%.2g)\n", 100 * sqrt(‚Ñú(cval) / f(0*x‚ÇÄ)), ùîá(cval))
printRMS(cval::Hyper) = @printf("RMS = %.2f%% (Œµ‚ÇÅ:%.2g, Œµ‚ÇÇ:%.2g, Œµ‚ÇÅŒµ‚ÇÇ:%.2g)\n", 100 * sqrt(‚Ñå(cval) / f(0*x‚ÇÄ)), ‚Ñå‚ÇÅ(cval), ‚Ñå‚ÇÇ(cval), ‚Ñå(cval))
printRMS(cval::Complex) = @printf("RMS = %.2f%% (im part:%.2g)\n", 100 * sqrt(‚Ñú(cval) / f(0*x‚ÇÄ)), ‚Ñë(cval))

‚Ñë(x::Complex) = imag(x)
ùîá(x::Dual) = DualNumbers.dualpart(x)
‚Ñå(x::Dual) = HyperDualNumbers.Œµ‚ÇÅŒµ‚ÇÇpart(x)
‚Ñå‚ÇÅ(x::Dual) = HyperDualNumbers.Œµ‚ÇÅpart(x)
‚Ñå‚ÇÇ(x::Dual) = HyperDualNumbers.Œµ‚ÇÇpart(x)
